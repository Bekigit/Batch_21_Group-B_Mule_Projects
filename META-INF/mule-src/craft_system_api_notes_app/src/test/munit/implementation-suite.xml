<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="implementation-suite.xml" />
	<munit:test name="post_notes-test" doc:id="b0ff5d3d-e098-4028-9290-42d6721d5f7c" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Insert" doc:id="591fbd4a-df3f-4420-ace8-1562f1c1885d" processor="db:insert">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="d3f57103-4b94-479d-a294-7bd73b54c786" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://postnotestest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://postnotestest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="7130d155-bfa1-4081-a037-91c9e6a1b0cf" >
				<munit:payload value="#[output application/json --- readUrl('classpath://postnotestest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://postnotestest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://postnotestest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to post_notes" doc:id="ac11944d-cf8f-4d46-b844-b89a4bb4757f" name="post_notes"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="3b8184cc-9942-4756-b4ed-69d9b777cf15" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import postnotestest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify Transform Message" doc:id="47a04ce2-8455-46c3-b80b-8fb64f41989a" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="e187551f-a4b9-452b-8fba-6b90d288c3e6" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="get_by_noteid-test" doc:id="b2a95460-a388-4db4-b767-b55336abce37" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Select" doc:id="157b1d65-5c73-4dd1-b265-d0ba059866d5" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a5dd5829-7051-4ef1-a205-9171e65c349e" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://getbynoteidtest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getbynoteidtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="9f951b11-5cd2-4ff9-a727-eef1f2d3cfe4" >
				<munit:payload value="#[output application/json --- readUrl('classpath://getbynoteidtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://getbynoteidtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getbynoteidtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get_by_noteid" doc:id="7c04320d-b955-4ccc-9070-251cc75d1e9c" name="get_by_noteid"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="66f1bea5-c7f8-48f3-a957-f9cf0743b8f7" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getbynoteidtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify Logger" doc:id="b6566434-6f3a-43b4-9899-b60f6ebacac2" processor="logger" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="4eeeb469-07a0-4093-a55d-847e92eb90b7" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
			<munit-tools:verify-call doc:name="Verify Transform Message" doc:id="729d117f-2d13-40cc-a8dc-9dff382c46de" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="7cfe8723-ff72-49f8-b684-4c5f72bb5771" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="select_notes-test" doc:id="34d72f92-db9c-4c55-9cef-682d0cb45eee" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Select" doc:id="848cc60c-31d4-4b57-9e97-e24eec0a36ec" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="310827fa-7f68-4a97-9375-30e19d09ea30" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://selectnotestest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://selectnotestest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:spy doc:name="Spy Transform Message" doc:id="c68bf26f-693b-415d-9d8a-0395bd03b997" processor="ee:transform">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="23a0f7b8-1407-44dc-b8b0-5c9ece032273" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:before-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="6d368693-d188-426d-9748-ad7a58f9beaa" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import selectnotestest::spy_assert_payload
---
spy_assert_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:before-call>
				<munit-tools:after-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="53dfb1e1-6856-4aa1-ad56-dbb6619e6fa3" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import selectnotestest::spy_assert_payload1
---
spy_assert_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:after-call>
			</munit-tools:spy>
			<munit:set-event doc:name="Set Input" doc:id="c14c57b6-b5c2-425a-841b-00b28c25d933" >
				<munit:payload value="#[output application/json --- readUrl('classpath://selectnotestest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://selectnotestest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://selectnotestest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to select_notes" doc:id="f892f74f-68dd-4e24-afac-b4627aabe0df" name="select_notes"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="50c838af-d286-4a02-9bf1-acba1d4b2ec7" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import selectnotestest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify Transform Message" doc:id="2a42014d-d263-4800-9a6f-e147b6f4514e" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="23a0f7b8-1407-44dc-b8b0-5c9ece032273" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="delete_by_noteid-test" doc:id="f6aadf4b-661e-45c1-8cda-f438f76c79ca" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Delete" doc:id="f922974a-0f2e-4d03-83b3-35da6c21d48b" processor="db:delete">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="9fa136d9-c837-4635-a6a2-97bfca712abb" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://deletebynoteidtest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://deletebynoteidtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="66985aa2-3529-457c-a2e3-2f6839a26bf4" >
				<munit:payload value="#[output application/json --- readUrl('classpath://deletebynoteidtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://deletebynoteidtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://deletebynoteidtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to delete_by_noteid" doc:id="2ef3ce4f-4e65-41f9-bc9c-a8013e324811" name="delete_by_noteid"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="ae3e99c5-68bb-44ac-85ed-7a4641420de4" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import deletebynoteidtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify Transform Message" doc:id="2265d97f-ad5a-48c3-9160-0416ad0ba749" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="26a7f120-dd34-482f-a151-c0ed716b5766" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="put_note_id-test" doc:id="320fede0-ba4e-4f3a-ae3b-5965ef37fb53" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Update" doc:id="81e30dd1-3cc1-486a-bb0f-4f547aa2addd" processor="db:update">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="87b50600-bc7b-4166-b006-2c1fbd1a9499" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://putnoteidtest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://putnoteidtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="94c44bae-915a-41ba-b861-fe1d3ef2a68d" >
				<munit:payload value="#[output application/json --- readUrl('classpath://putnoteidtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://putnoteidtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://putnoteidtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to put_note_id" doc:id="6c13cbe0-0c22-44fe-8c60-9579c8c54e7e" name="put_note_id"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="ddd5a809-ee00-4325-bd93-1643945ab560" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import putnoteidtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
